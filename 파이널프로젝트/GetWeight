{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"GetWeight","provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyOVtzWbVevwurV79GcHdLXI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I5aS3I7Lq0kV","executionInfo":{"status":"ok","timestamp":1633768830711,"user_tz":-540,"elapsed":24457,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"c0e79819-d829-4fde-a7b1-39627a8961ff"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"PMxeVeH4cxKl"},"source":["#데이터 살펴보기"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ECiRf6oErAxM","executionInfo":{"status":"ok","timestamp":1633770464530,"user_tz":-540,"elapsed":638,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"e4436422-0d9a-453a-ac92-33a3da8940a4"},"source":["PATH = '/content/drive/MyDrive/Colab Notebooks/파이널프로젝트/data/csvdata/Fruits_csv/'\n","folder_list = os.listdir(PATH+'세부')\n","folder_list"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['persimmon_bansi.csv',\n"," 'persimmon_booyu.csv',\n"," 'pear_chuhwang.csv',\n"," 'pear_singo.csv',\n"," 'persimmon_daebong.csv',\n"," 'apple_yanggwang.csv',\n"," 'mandarine_onjumilgam.csv',\n"," 'apple_fuji.csv',\n"," 'mandarine_hallabong.csv']"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":420},"id":"_UiBHmGKsMkb","executionInfo":{"status":"ok","timestamp":1633770881368,"user_tz":-540,"elapsed":229,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"3d15f991-9111-42a4-c733-36abb82d0578"},"source":["#df = pd.read_csv(PATH+'세부/'+folder_list[0])\n","df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/파이널프로젝트/data/csvdata/OnlyLabelsmeta.csv')\n","df"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>file_name</th>\n","      <th>cate1</th>\n","      <th>cate2</th>\n","      <th>cate3</th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>weight</th>\n","      <th>fruit_name</th>\n","      <th>xmin</th>\n","      <th>ymin</th>\n","      <th>xmax</th>\n","      <th>ymax</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>apple_fuji_M_1-10_5DI90</td>\n","      <td>사과</td>\n","      <td>부사</td>\n","      <td>상</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>apple_fuji</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>apple_fuji_M_1-11_1TOP</td>\n","      <td>사과</td>\n","      <td>부사</td>\n","      <td>상</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>apple_fuji</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>apple_fuji_M_1-12_2FR45</td>\n","      <td>사과</td>\n","      <td>부사</td>\n","      <td>상</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>apple_fuji</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>apple_fuji_M_1-13_3FR90</td>\n","      <td>사과</td>\n","      <td>부사</td>\n","      <td>상</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>apple_fuji</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>apple_fuji_M_1-14_4DI45</td>\n","      <td>사과</td>\n","      <td>부사</td>\n","      <td>상</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>apple_fuji</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>52132</th>\n","      <td>0</td>\n","      <td>pear_chuhwang_M_9-5_5DI90</td>\n","      <td>배</td>\n","      <td>추황</td>\n","      <td>상</td>\n","      <td>10.2</td>\n","      <td>9.0</td>\n","      <td>535</td>\n","      <td>pear_chuhwang</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>52133</th>\n","      <td>0</td>\n","      <td>pear_chuhwang_M_9-6_1TOP</td>\n","      <td>배</td>\n","      <td>추황</td>\n","      <td>상</td>\n","      <td>10.2</td>\n","      <td>9.0</td>\n","      <td>535</td>\n","      <td>pear_chuhwang</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>52134</th>\n","      <td>0</td>\n","      <td>pear_chuhwang_M_9-7_2FR45</td>\n","      <td>배</td>\n","      <td>추황</td>\n","      <td>상</td>\n","      <td>10.2</td>\n","      <td>9.0</td>\n","      <td>535</td>\n","      <td>pear_chuhwang</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>52135</th>\n","      <td>0</td>\n","      <td>pear_chuhwang_M_9-8_3FR90</td>\n","      <td>배</td>\n","      <td>추황</td>\n","      <td>상</td>\n","      <td>10.2</td>\n","      <td>9.0</td>\n","      <td>535</td>\n","      <td>pear_chuhwang</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>52136</th>\n","      <td>0</td>\n","      <td>pear_chuhwang_M_9-9_4DI45</td>\n","      <td>배</td>\n","      <td>추황</td>\n","      <td>상</td>\n","      <td>10.2</td>\n","      <td>9.0</td>\n","      <td>535</td>\n","      <td>pear_chuhwang</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>52137 rows × 13 columns</p>\n","</div>"],"text/plain":["       index                  file_name cate1 cate2  ... xmin  ymin  xmax  ymax\n","0          0    apple_fuji_M_1-10_5DI90    사과    부사  ...    0     0  1000  1000\n","1          0     apple_fuji_M_1-11_1TOP    사과    부사  ...    0     0  1000  1000\n","2          0    apple_fuji_M_1-12_2FR45    사과    부사  ...    0     0  1000  1000\n","3          0    apple_fuji_M_1-13_3FR90    사과    부사  ...    0     0  1000  1000\n","4          0    apple_fuji_M_1-14_4DI45    사과    부사  ...    0     0  1000  1000\n","...      ...                        ...   ...   ...  ...  ...   ...   ...   ...\n","52132      0  pear_chuhwang_M_9-5_5DI90     배    추황  ...    0     0  1000  1000\n","52133      0   pear_chuhwang_M_9-6_1TOP     배    추황  ...    0     0  1000  1000\n","52134      0  pear_chuhwang_M_9-7_2FR45     배    추황  ...    0     0  1000  1000\n","52135      0  pear_chuhwang_M_9-8_3FR90     배    추황  ...    0     0  1000  1000\n","52136      0  pear_chuhwang_M_9-9_4DI45     배    추황  ...    0     0  1000  1000\n","\n","[52137 rows x 13 columns]"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"svZ4Y5Urs0k-","executionInfo":{"status":"ok","timestamp":1633770909961,"user_tz":-540,"elapsed":260,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"8ef39711-d062-4f2b-cec2-1d03e62447e7"},"source":["#df.drop(columns=['fruit_name','Unnamed: 0', 'cate3'])\n","df = df[['fruit_name','width', 'height', 'weight', 'cate3']]\n","df.head()"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fruit_name</th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>weight</th>\n","      <th>cate3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>apple_fuji</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>상</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>apple_fuji</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>상</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>apple_fuji</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>상</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>apple_fuji</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>상</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>apple_fuji</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>상</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   fruit_name  width  height  weight cate3\n","0  apple_fuji    8.6     7.5     290     상\n","1  apple_fuji    8.6     7.5     290     상\n","2  apple_fuji    8.6     7.5     290     상\n","3  apple_fuji    8.6     7.5     290     상\n","4  apple_fuji    8.6     7.5     290     상"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"NuoW26eDTxip","executionInfo":{"status":"ok","timestamp":1633770910286,"user_tz":-540,"elapsed":12,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"727aac97-9949-4f36-82f1-9df0ef4d6ecb"},"source":["df.describe()"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>weight</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>52137.000000</td>\n","      <td>52137.000000</td>\n","      <td>52137.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>8.377450</td>\n","      <td>7.318150</td>\n","      <td>301.484991</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.499088</td>\n","      <td>1.718693</td>\n","      <td>161.028438</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>5.300000</td>\n","      <td>0.900000</td>\n","      <td>21.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>7.300000</td>\n","      <td>5.800000</td>\n","      <td>185.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>8.400000</td>\n","      <td>7.600000</td>\n","      <td>275.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>9.300000</td>\n","      <td>8.700000</td>\n","      <td>384.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>12.200000</td>\n","      <td>10.900000</td>\n","      <td>765.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              width        height        weight\n","count  52137.000000  52137.000000  52137.000000\n","mean       8.377450      7.318150    301.484991\n","std        1.499088      1.718693    161.028438\n","min        5.300000      0.900000     21.000000\n","25%        7.300000      5.800000    185.000000\n","50%        8.400000      7.600000    275.000000\n","75%        9.300000      8.700000    384.000000\n","max       12.200000     10.900000    765.000000"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"HhdZpASbO-4x","executionInfo":{"status":"ok","timestamp":1633770910558,"user_tz":-540,"elapsed":12,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"9b892ce4-f403-4109-b7ca-b4416f744981"},"source":["df['multi'] = df['height'] * df['width']\n","df.head()"],"execution_count":26,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"Entry point for launching an IPython kernel.\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fruit_name</th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>weight</th>\n","      <th>cate3</th>\n","      <th>multi</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>apple_fuji</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>상</td>\n","      <td>64.5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>apple_fuji</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>상</td>\n","      <td>64.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>apple_fuji</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>상</td>\n","      <td>64.5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>apple_fuji</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>상</td>\n","      <td>64.5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>apple_fuji</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>상</td>\n","      <td>64.5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   fruit_name  width  height  weight cate3  multi\n","0  apple_fuji    8.6     7.5     290     상   64.5\n","1  apple_fuji    8.6     7.5     290     상   64.5\n","2  apple_fuji    8.6     7.5     290     상   64.5\n","3  apple_fuji    8.6     7.5     290     상   64.5\n","4  apple_fuji    8.6     7.5     290     상   64.5"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"dxuXTQ5ZPNAb","executionInfo":{"status":"ok","timestamp":1633770912036,"user_tz":-540,"elapsed":483,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"1013a8ed-de0f-4412-edac-3f3ffa410f66"},"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","plt.scatter(df['weight'], df['multi'])\n","\n","plt.xlabel('weight')\n","plt.ylabel('multi')\n","plt.show()"],"execution_count":28,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":278},"id":"Da2FYaJQQCRx","executionInfo":{"status":"ok","timestamp":1631189746442,"user_tz":-540,"elapsed":7,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"74133487-9266-44fa-f292-1d2e86b92c1b"},"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","plt.scatter(df['weight'], df['height'])\n","\n","plt.xlabel('weight')\n","plt.ylabel('height')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":278},"id":"75V8ebyQQCHa","executionInfo":{"status":"ok","timestamp":1631189746888,"user_tz":-540,"elapsed":451,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"149243b5-1c58-4cf1-c71e-05a262bcb845"},"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","plt.scatter(df['weight'], df['width'])\n","\n","plt.xlabel('weight')\n","plt.ylabel('width')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"dFvyW-cZc1Al"},"source":["#데이터 전처리하기"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":332},"id":"x8FIevnedMT-","executionInfo":{"status":"error","timestamp":1631189746901,"user_tz":-540,"elapsed":30,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"c7a409ed-744c-42e0-e6c5-fb7c31304f33"},"source":["df = df.drop(columns=['index', 'file_name'])\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-27cf2f7d1993>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'index'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'file_name'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4172\u001b[0m             \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4173\u001b[0m             \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4174\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4175\u001b[0m         )\n\u001b[1;32m   4176\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   3887\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3888\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3889\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3891\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[1;32m   3921\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3922\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3923\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3924\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3925\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   5285\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5286\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5287\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask]} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5288\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5289\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['index' 'file_name'] not found in axis\""]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":408},"id":"0QE-k9_cdYW1","executionInfo":{"status":"ok","timestamp":1631189758023,"user_tz":-540,"elapsed":262,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"7912eaf2-7477-429d-aba6-7b69f83700ee"},"source":["df = df.drop_duplicates()\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fruit_name</th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>weight</th>\n","      <th>cate3</th>\n","      <th>multi</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>apple_fuji</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>290</td>\n","      <td>상</td>\n","      <td>64.50</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>apple_fuji</td>\n","      <td>9.5</td>\n","      <td>7.5</td>\n","      <td>295</td>\n","      <td>상</td>\n","      <td>71.25</td>\n","    </tr>\n","    <tr>\n","      <th>80</th>\n","      <td>apple_fuji</td>\n","      <td>8.8</td>\n","      <td>7.2</td>\n","      <td>270</td>\n","      <td>상</td>\n","      <td>63.36</td>\n","    </tr>\n","    <tr>\n","      <th>120</th>\n","      <td>apple_fuji</td>\n","      <td>8.6</td>\n","      <td>7.1</td>\n","      <td>275</td>\n","      <td>상</td>\n","      <td>61.06</td>\n","    </tr>\n","    <tr>\n","      <th>160</th>\n","      <td>apple_fuji</td>\n","      <td>8.1</td>\n","      <td>7.1</td>\n","      <td>265</td>\n","      <td>상</td>\n","      <td>57.51</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>51942</th>\n","      <td>pear_chuhwang</td>\n","      <td>8.6</td>\n","      <td>8.8</td>\n","      <td>455</td>\n","      <td>상</td>\n","      <td>75.68</td>\n","    </tr>\n","    <tr>\n","      <th>51979</th>\n","      <td>pear_chuhwang</td>\n","      <td>10.0</td>\n","      <td>9.2</td>\n","      <td>485</td>\n","      <td>상</td>\n","      <td>92.00</td>\n","    </tr>\n","    <tr>\n","      <th>52007</th>\n","      <td>pear_chuhwang</td>\n","      <td>9.3</td>\n","      <td>8.6</td>\n","      <td>470</td>\n","      <td>상</td>\n","      <td>79.98</td>\n","    </tr>\n","    <tr>\n","      <th>52043</th>\n","      <td>pear_chuhwang</td>\n","      <td>9.8</td>\n","      <td>8.4</td>\n","      <td>455</td>\n","      <td>상</td>\n","      <td>82.32</td>\n","    </tr>\n","    <tr>\n","      <th>52101</th>\n","      <td>pear_chuhwang</td>\n","      <td>10.2</td>\n","      <td>9.0</td>\n","      <td>535</td>\n","      <td>상</td>\n","      <td>91.80</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1208 rows × 6 columns</p>\n","</div>"],"text/plain":["          fruit_name  width  height  weight cate3  multi\n","0         apple_fuji    8.6     7.5     290     상  64.50\n","40        apple_fuji    9.5     7.5     295     상  71.25\n","80        apple_fuji    8.8     7.2     270     상  63.36\n","120       apple_fuji    8.6     7.1     275     상  61.06\n","160       apple_fuji    8.1     7.1     265     상  57.51\n","...              ...    ...     ...     ...   ...    ...\n","51942  pear_chuhwang    8.6     8.8     455     상  75.68\n","51979  pear_chuhwang   10.0     9.2     485     상  92.00\n","52007  pear_chuhwang    9.3     8.6     470     상  79.98\n","52043  pear_chuhwang    9.8     8.4     455     상  82.32\n","52101  pear_chuhwang   10.2     9.0     535     상  91.80\n","\n","[1208 rows x 6 columns]"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":290},"id":"nspeTHHAd6T1","executionInfo":{"status":"ok","timestamp":1631189768547,"user_tz":-540,"elapsed":443,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"08e0307e-1489-4aaf-92bc-6ae4932925b7"},"source":["df.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>weight</th>\n","      <th>multi</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1208.000000</td>\n","      <td>1208.000000</td>\n","      <td>1208.000000</td>\n","      <td>1208.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>8.414487</td>\n","      <td>7.337252</td>\n","      <td>305.421358</td>\n","      <td>63.889123</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.502607</td>\n","      <td>1.701932</td>\n","      <td>163.526654</td>\n","      <td>24.436547</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>5.300000</td>\n","      <td>0.900000</td>\n","      <td>21.000000</td>\n","      <td>10.530000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>7.300000</td>\n","      <td>5.900000</td>\n","      <td>185.000000</td>\n","      <td>45.105000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>8.400000</td>\n","      <td>7.700000</td>\n","      <td>275.000000</td>\n","      <td>63.160000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>9.300000</td>\n","      <td>8.700000</td>\n","      <td>380.000000</td>\n","      <td>83.040000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>12.200000</td>\n","      <td>10.900000</td>\n","      <td>765.000000</td>\n","      <td>124.440000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["             width       height       weight        multi\n","count  1208.000000  1208.000000  1208.000000  1208.000000\n","mean      8.414487     7.337252   305.421358    63.889123\n","std       1.502607     1.701932   163.526654    24.436547\n","min       5.300000     0.900000    21.000000    10.530000\n","25%       7.300000     5.900000   185.000000    45.105000\n","50%       8.400000     7.700000   275.000000    63.160000\n","75%       9.300000     8.700000   380.000000    83.040000\n","max      12.200000    10.900000   765.000000   124.440000"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":138},"id":"cgKG9xNoc7qI","executionInfo":{"status":"ok","timestamp":1631189769930,"user_tz":-540,"elapsed":11,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"0fab224d-2dba-49f0-eedd-746084f446b7"},"source":["df[df['height']<4]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fruit_name</th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>weight</th>\n","      <th>cate3</th>\n","      <th>multi</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>14436</th>\n","      <td>mandarine_onjumilgam</td>\n","      <td>5.3</td>\n","      <td>3.9</td>\n","      <td>60</td>\n","      <td>보통</td>\n","      <td>20.67</td>\n","    </tr>\n","    <tr>\n","      <th>14596</th>\n","      <td>mandarine_onjumilgam</td>\n","      <td>5.5</td>\n","      <td>3.9</td>\n","      <td>65</td>\n","      <td>보통</td>\n","      <td>21.45</td>\n","    </tr>\n","    <tr>\n","      <th>46793</th>\n","      <td>pear_singo</td>\n","      <td>11.7</td>\n","      <td>0.9</td>\n","      <td>750</td>\n","      <td>상</td>\n","      <td>10.53</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 fruit_name  width  height  weight cate3  multi\n","14436  mandarine_onjumilgam    5.3     3.9      60    보통  20.67\n","14596  mandarine_onjumilgam    5.5     3.9      65    보통  21.45\n","46793            pear_singo   11.7     0.9     750     상  10.53"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"LIXetEn7dkjc"},"source":["> height가 3.9인것은 width도 같이 작기때문에 작은 과일이라 생각할 수 있지만 width가 11.7인데에 비해 height가 0.9인것은 오류가 있다고 생각할 수 잇다.\n","\n","> 실제로 이미지를 확인해보니 과일의 형태는 정상적이었다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":196},"id":"J0THZKsDdKU5","executionInfo":{"status":"ok","timestamp":1631189772652,"user_tz":-540,"elapsed":7,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"08048036-2f54-42d7-ef41-b80a82ac40fc"},"source":["df.drop(46793, axis=0, inplace=True)\n","df[df['height']<4]"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4174: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fruit_name</th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>weight</th>\n","      <th>cate3</th>\n","      <th>multi</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>14436</th>\n","      <td>mandarine_onjumilgam</td>\n","      <td>5.3</td>\n","      <td>3.9</td>\n","      <td>60</td>\n","      <td>보통</td>\n","      <td>20.67</td>\n","    </tr>\n","    <tr>\n","      <th>14596</th>\n","      <td>mandarine_onjumilgam</td>\n","      <td>5.5</td>\n","      <td>3.9</td>\n","      <td>65</td>\n","      <td>보통</td>\n","      <td>21.45</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 fruit_name  width  height  weight cate3  multi\n","14436  mandarine_onjumilgam    5.3     3.9      60    보통  20.67\n","14596  mandarine_onjumilgam    5.5     3.9      65    보통  21.45"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"QgUUGiN4tGLb","colab":{"base_uri":"https://localhost:8080/","height":200},"executionInfo":{"status":"ok","timestamp":1631189776228,"user_tz":-540,"elapsed":412,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"cd2bf692-fce1-4c51-9960-b6d14152c037"},"source":["train_df = df[['width','height']]\n","labels_df = df['weight']\n","train_df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>width</th>\n","      <th>height</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>9.5</td>\n","      <td>7.5</td>\n","    </tr>\n","    <tr>\n","      <th>80</th>\n","      <td>8.8</td>\n","      <td>7.2</td>\n","    </tr>\n","    <tr>\n","      <th>120</th>\n","      <td>8.6</td>\n","      <td>7.1</td>\n","    </tr>\n","    <tr>\n","      <th>160</th>\n","      <td>8.1</td>\n","      <td>7.1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     width  height\n","0      8.6     7.5\n","40     9.5     7.5\n","80     8.8     7.2\n","120    8.6     7.1\n","160    8.1     7.1"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"NDtAkNcVeS8i"},"source":["#모델 만들기"]},{"cell_type":"markdown","metadata":{"id":"MQsTAm5nlOVa"},"source":["## 기본 테스트"]},{"cell_type":"code","metadata":{"id":"-hJ_NdSLlOEU"},"source":["from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","standard_scaler = scaler.fit_transform(train_df)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cM4wiB5dePc2","executionInfo":{"status":"ok","timestamp":1631189779781,"user_tz":-540,"elapsed":406,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"bb05c136-d2ba-4d48-84cd-88673281c6cb"},"source":["from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","\n","X_train, X_test, y_train,y_test = train_test_split(train_df, labels_df, test_size=0.3)\n","\n","lr = LinearRegression()\n","lr.fit(X_train, y_train)\n","print(lr.score(X_test, y_test))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9267043795202613\n"]}]},{"cell_type":"markdown","metadata":{"id":"Gw6SXaswvF2Y"},"source":["#성능평가 및 하이퍼 파라미터 적용"]},{"cell_type":"markdown","metadata":{"id":"tuGk696mxSHH"},"source":["## 정규화"]},{"cell_type":"code","metadata":{"id":"jQJD8DM1xT-3"},"source":["from sklearn.preprocessing import StandardScaler\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","\n","scaler = StandardScaler()\n","standard_scaler = scaler.fit_transform(train_df)\n","\n","X_train, X_test, y_train,y_test = train_test_split(train_df, labels_df, test_size=0.3)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1H843xO3kWrj","executionInfo":{"status":"ok","timestamp":1631189779782,"user_tz":-540,"elapsed":17,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"8fa78064-f0a1-4892-8614-e4d15d4e63de"},"source":["from sklearn.metrics import mean_squared_error, mean_absolute_error\n","import numpy as np\n","\n","def get_rmsle(y, pred):\n","  log_y = np.log1p(y)\n","  log_pred = np.log1p(pred)\n","  mlse = np.sum((log_y - log_pred)**2)\n","  #rmsle = np.sqrt(mlse)\n","  rmsle = np.sqrt(np.mean(mlse))\n","  return rmsle\n","\n","def get_rmse(y, pred):\n","  return np.sqrt(mean_squared_error(y, pred))\n","\n","def eval_reg(y, pred):\n","  rmsle = get_rmsle(y, pred)\n","  rmse = get_rmse(y, pred)\n","  mae = mean_absolute_error(y, pred)\n","\n","  print('RMSLE : ', rmsle)\n","  print('RMSE : ', rmse)\n","  print(\"MAE : \", mae)\n","\n","#테스트용 위 기본 모델 테스트해보기\n","pred = lr.predict(X_test)\n","\n","eval_reg(y_test, pred)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSLE :  9.383955203145971\n","RMSE :  43.56233555315336\n","MAE :  32.66008172963879\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: RuntimeWarning: invalid value encountered in log1p\n","  \n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"npLjhaXbvLH1","executionInfo":{"status":"ok","timestamp":1631189780062,"user_tz":-540,"elapsed":288,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"d20a68e9-47b8-4c22-8e5a-14b741bb6099"},"source":["labels_df.hist()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f90bc0e4110>"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"6TOmxx6qwWEX"},"source":["##하이퍼 파라미터"]},{"cell_type":"markdown","metadata":{"id":"teythLkQwcVH"},"source":["##성능평가 함수"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"3bmJct_DKp5I","executionInfo":{"status":"ok","timestamp":1631189780537,"user_tz":-540,"elapsed":487,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"f3d937bb-6c49-4548-f1c4-53b037dfb8dc"},"source":["df_log_labels = np.log1p(labels_df)\n","df_log_labels.hist()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f90bc0dc750>"]},"metadata":{},"execution_count":20},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"BIBgJv7awH7h"},"source":["from sklearn.model_selection import GridSearchCV\n","\n","def get_best_param(model, alpha_list):\n","  params={\n","      'alpha' : alpha_list\n","  }\n","\n","  # 수가 작을수록 좋기 때문에 neg_mean_squared_error를 쓴다.\n","  grid_cv = GridSearchCV(model, param_grid=params, scoring='neg_mean_squared_error', cv=5)\n","  grid_cv.fit(train_df, df_log_labels)\n","\n","  print('\\n===============================================')\n","  print('best score : ', grid_cv.best_score_)\n","  print('best params : ', grid_cv.best_params_)\n","  print('================================================\\n')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-KxbKYCCwwUB"},"source":["##Ridge"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"12N5XVKJwe2l","executionInfo":{"status":"ok","timestamp":1631189780537,"user_tz":-540,"elapsed":6,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"09c924f6-b49e-4db0-9b81-2b6a2395c7b8"},"source":["from sklearn.linear_model import Ridge\n","\n","model = Ridge()\n","alpha_list = [0.001, 0.01, 0.1, 1, 25, 50, 100]\n","get_best_param(model, alpha_list)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","===============================================\n","best score :  -0.0235635453518745\n","best params :  {'alpha': 50}\n","================================================\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UbJPq9J9LAPv","executionInfo":{"status":"ok","timestamp":1631189781541,"user_tz":-540,"elapsed":1007,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"3ed00b67-5216-4b34-fa5c-be443db38f5b"},"source":["model = Ridge()\n","alpha_list = list(i for i in range(25, 100))\n","get_best_param(model, alpha_list)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","===============================================\n","best score :  -0.023549093603291243\n","best params :  {'alpha': 61}\n","================================================\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"IAJv_WSpbw0b"},"source":["### Ridge"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q9FxM-1XLSbn","executionInfo":{"status":"ok","timestamp":1631189781542,"user_tz":-540,"elapsed":12,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"aeba44f2-e4ab-4e63-dc5f-975f858843b7"},"source":["model = Ridge()\n","alpha_list = list(i/10 + 60 for i in range(1, 10))\n","get_best_param(model, alpha_list)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","===============================================\n","best score :  -0.023549103648125857\n","best params :  {'alpha': 60.9}\n","================================================\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2v9M84YCLNH4","executionInfo":{"status":"ok","timestamp":1631189781542,"user_tz":-540,"elapsed":7,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"70986e48-7aa1-4215-b495-e8b4b0dce6fa"},"source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(train_df, df_log_labels, test_size=0.2)\n","\n","ridge = Ridge(alpha=61)\n","ridge.fit(X_train, y_train)\n","pred = ridge.predict(X_test)\n","\n","# log로 데이터 크기를 줄였음으로 지수함수를 이용하여 원래 크기로 변경\n","y_test_exp = np.expm1(y_test)\n","y_pred_exp = np.expm1(pred)\n","\n","print(eval_reg(y_test_exp, y_pred_exp))\n","ridge.score(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSLE :  2.5859175505661915\n","RMSE :  34.8381788813786\n","MAE :  24.15483689151229\n","None\n"]},{"output_type":"execute_result","data":{"text/plain":["0.9211032084401004"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sRJDTjy-MDsP","executionInfo":{"status":"ok","timestamp":1631189781542,"user_tz":-540,"elapsed":5,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"c578d6ff-51ce-4204-a713-4f0502a6d19c"},"source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(train_df, labels_df, test_size=0.2)\n","\n","ridge = Ridge(alpha=61)\n","ridge.fit(X_train, y_train)\n","pred = ridge.predict(X_test)\n","\n","ridge.score(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9319726833739428"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"qAAvf5R1Mh4d"},"source":["> 위 df_log_labels 방법이 더욱 잘 나오는것을 볼 수 있다."]},{"cell_type":"markdown","metadata":{"id":"dpCxsyxk_TXH"},"source":["##Lasso"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xYp012ywxBl1","executionInfo":{"status":"ok","timestamp":1631189781932,"user_tz":-540,"elapsed":392,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"e3eeec27-cdc3-4882-fdef-f1933e6b17d9"},"source":["from sklearn.linear_model import Lasso\n","\n","model = Lasso()\n","alpha_list = [0.001, 0.01, 0.1, 1, 10, 25, 50, 100]\n","get_best_param(model, alpha_list)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","===============================================\n","best score :  -0.02372156835525268\n","best params :  {'alpha': 0.01}\n","================================================\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"LN-dEMspcBaq"},"source":["### Lasso"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kR_IFKEy_WAY","executionInfo":{"status":"ok","timestamp":1631189781933,"user_tz":-540,"elapsed":13,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"a983d95a-05f4-4398-cc98-562633be1ed5"},"source":["model = Lasso()\n","alpha_list = list(i/100  for i in range(0, 10))\n","print(alpha_list)\n","get_best_param(model, alpha_list)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09]\n","\n","===============================================\n","best score :  -0.02347501387286638\n","best params :  {'alpha': 0.03}\n","================================================\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:515: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 11.164826345012639, tolerance: 0.03153029401411413\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:515: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 9.389165867041909, tolerance: 0.027692262393902628\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:515: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 11.009504343751695, tolerance: 0.030569892864232312\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:515: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 8.726913863758924, tolerance: 0.03147660115718886\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:515: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 7.700995196538361, tolerance: 0.02304651663110543\n","  positive)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kN33c2G4Mx_K","executionInfo":{"status":"ok","timestamp":1631189781933,"user_tz":-540,"elapsed":10,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"641d59e6-f261-4339-9bdf-915657b5162d"},"source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(train_df, df_log_labels, test_size=0.2)\n","\n","lasso = Lasso(alpha=0.03)\n","lasso.fit(X_train, y_train)\n","pred = lasso.predict(X_test)\n","\n","# log로 데이터 크기를 줄였음으로 지수함수를 이용하여 원래 크기로 변경\n","y_test_exp = np.expm1(y_test)\n","y_pred_exp = np.expm1(pred)\n","\n","eval_reg(y_test_exp, y_pred_exp)\n","lasso.score(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSLE :  2.824618596175829\n","RMSE :  31.84295935299392\n","MAE :  24.17723265648719\n"]},{"output_type":"execute_result","data":{"text/plain":["0.8959662871276948"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5NEuFFSZNOyx","executionInfo":{"status":"ok","timestamp":1631189781934,"user_tz":-540,"elapsed":7,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"c4247097-96bb-43f3-f160-81d38213bf0d"},"source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(train_df, labels_df, test_size=0.2)\n","\n","lasso = Lasso(alpha=0.03)\n","lasso.fit(X_train, y_train)\n","pred = lasso.predict(X_test)\n","\n","# log로 데이터 크기를 줄였음으로 지수함수를 이용하여 원래 크기로 변경\n","y_test_exp = np.expm1(y_test)\n","y_pred_exp = np.expm1(pred)\n","\n","lasso.score(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/series.py:726: RuntimeWarning: overflow encountered in expm1\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"output_type":"execute_result","data":{"text/plain":["0.9218828595864296"]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","metadata":{"id":"o0s5mq72Nc1Y"},"source":["##Elastic net"]},{"cell_type":"code","metadata":{"id":"xpFfllYDNUqH"},"source":["from sklearn.model_selection import GridSearchCV\n","\n","def get_best_param(alpha_list, l1_list):\n","  params={\n","      'alpha':alpha_list,\n","      'l1_ratio':l1_list\n","  }\n","\n","  grid_cv = GridSearchCV(model, param_grid=params, scoring='neg_mean_squared_error', cv=5)\n","  grid_cv.fit(train_df, df_log_labels)\n","\n","  print('\\n===============================================')\n","  print('best score : ', grid_cv.best_score_)\n","  print('best params : ', grid_cv.best_params_)\n","  print('================================================\\n')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n4ni6t32Nmr7","executionInfo":{"status":"ok","timestamp":1631189783453,"user_tz":-540,"elapsed":1169,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"7123364e-efaa-4683-85b5-6284f367aa04"},"source":["from sklearn.linear_model import ElasticNet\n","\n","model=ElasticNet()\n","alpha_list=[0.001, 0.01, 0.1, 1, 10, 25, 50, 100]\n","l1_list = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\n","get_best_param(alpha_list, l1_list)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","===============================================\n","best score :  -0.023685003431459423\n","best params :  {'alpha': 0.1, 'l1_ratio': 0.1}\n","================================================\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"Bo9LqE6ucUOX"},"source":["### ElasticNet"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FqpYTJwCNrWJ","executionInfo":{"status":"ok","timestamp":1631189783976,"user_tz":-540,"elapsed":527,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"cae78a48-93a8-48b8-8ca5-d2bcfdc04e37"},"source":["from sklearn.linear_model import ElasticNet\n","\n","model=ElasticNet()\n","alpha_list = list(i/100  for i in range(0, 20))\n","alpha_list\n","l1_list = [0.1]\n","get_best_param(alpha_list, l1_list)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:515: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 11.164826345012639, tolerance: 0.03153029401411413\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:515: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 9.389165867041909, tolerance: 0.027692262393902628\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:515: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 11.009504343751695, tolerance: 0.030569892864232312\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:515: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 8.726913863758924, tolerance: 0.03147660115718886\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:515: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: UserWarning: Coordinate descent with no regularization may lead to unexpected results and is discouraged.\n","  positive)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 7.700995196538361, tolerance: 0.02304651663110543\n","  positive)\n"]},{"output_type":"stream","name":"stdout","text":["\n","===============================================\n","best score :  -0.023495866162179586\n","best params :  {'alpha': 0.06, 'l1_ratio': 0.1}\n","================================================\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f1HuI84IOQrJ","executionInfo":{"status":"ok","timestamp":1631189796743,"user_tz":-540,"elapsed":4,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"73b956f5-efe4-44d0-bb0a-0eae8f5affa6"},"source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(train_df, df_log_labels, test_size=0.2)\n","\n","elastic = ElasticNet(alpha= 0.06, l1_ratio= 0.1)\n","elastic.fit(X_train, y_train)\n","pred = elastic.predict(X_test)\n","\n","# log로 데이터 크기를 줄였음으로 지수함수를 이용하여 원래 크기로 변경\n","y_test_exp = np.expm1(y_test)\n","y_pred_exp = np.expm1(pred)\n","\n","eval_reg(y_test_exp, y_pred_exp)\n","elastic.score(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSLE :  1.686045863728597\n","RMSE :  30.864751907098523\n","MAE :  23.741061396177628\n"]},{"output_type":"execute_result","data":{"text/plain":["0.9605520516164681"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QZGTn2z5OiEQ","executionInfo":{"status":"ok","timestamp":1631189796996,"user_tz":-540,"elapsed":3,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"c845a174-3315-480e-80ba-f85314230e3e"},"source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(train_df, labels_df, test_size=0.2)\n","\n","elastic = ElasticNet(alpha= 0.06, l1_ratio= 0.1)\n","elastic.fit(X_train, y_train)\n","pred = elastic.predict(X_test)\n","\n","# log로 데이터 크기를 줄였음으로 지수함수를 이용하여 원래 크기로 변경\n","y_test_exp = np.expm1(y_test)\n","y_pred_exp = np.expm1(pred)\n","\n","elastic.score(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/series.py:726: RuntimeWarning: overflow encountered in expm1\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"output_type":"execute_result","data":{"text/plain":["0.9276421663978855"]},"metadata":{},"execution_count":41}]},{"cell_type":"markdown","metadata":{"id":"UySSrdDWPD4e"},"source":["#모델 저장"]},{"cell_type":"code","metadata":{"id":"t0I-k0wHPMXn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631190074272,"user_tz":-540,"elapsed":249,"user":{"displayName":"조현기","photoUrl":"","userId":"02064242295340458415"}},"outputId":"389d0252-4c62-4525-fc00-ee44cc60a72c"},"source":["from joblib import dump\n","\n","dump(elastic, 'get_weight_EN.joblib')\n","dump(ridge, 'get_weight_Ridge.joblib')\n","dump(lasso, 'get_weight_Lasso.joblib')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['get_weight_Lasso.joblib']"]},"metadata":{},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"c_fiTTAFNgy5"},"source":["# 모델 불러오기 및 테스트하기"]},{"cell_type":"markdown","metadata":{"id":"SPCiT-_LNjqp"},"source":["## 모델 불러오기"]},{"cell_type":"code","metadata":{"id":"4qGb92gifweR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633768835949,"user_tz":-540,"elapsed":2628,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"6cf9c166-2f07-4b18-917c-85eaf0979f6a"},"source":["from sklearn.externals import joblib\n","\n","elastic = joblib.load('/content/drive/MyDrive/Colab Notebooks/파이널프로젝트/data/saved_model/get_weight_EN.joblib')\n","ridge = joblib.load('/content/drive/MyDrive/Colab Notebooks/파이널프로젝트/data/saved_model/get_weight_Ridge.joblib')\n","lasso = joblib.load('/content/drive/MyDrive/Colab Notebooks/파이널프로젝트/data/saved_model/get_weight_Lasso.joblib')"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/__init__.py:15: FutureWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.\n","  warnings.warn(msg, category=FutureWarning)\n"]}]},{"cell_type":"markdown","metadata":{"id":"p7qb2IxtO2I6"},"source":["##검증 데이터 불러오기"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"mNwRtmJ2Opwl","executionInfo":{"status":"ok","timestamp":1633768837041,"user_tz":-540,"elapsed":1096,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"c1df4f29-b347-45d2-bd78-2a7316884fcc"},"source":["import pandas as pd\n","import numpy as np\n","\n","df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/파이널프로젝트/data/csvdata/Validation.csv')\n","df.head()"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>index</th>\n","      <th>file_name</th>\n","      <th>cate1</th>\n","      <th>cate2</th>\n","      <th>cate3</th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>weight</th>\n","      <th>fruit_name</th>\n","      <th>xmin</th>\n","      <th>ymin</th>\n","      <th>xmax</th>\n","      <th>ymax</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>apple_fuji_L_77-21_1TOP</td>\n","      <td>사과</td>\n","      <td>부사</td>\n","      <td>특</td>\n","      <td>9.0</td>\n","      <td>9.3</td>\n","      <td>380</td>\n","      <td>apple_fuji</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>apple_fuji_L_77-22_2FR45</td>\n","      <td>사과</td>\n","      <td>부사</td>\n","      <td>특</td>\n","      <td>9.0</td>\n","      <td>9.3</td>\n","      <td>380</td>\n","      <td>apple_fuji</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>apple_fuji_L_77-23_3FR90</td>\n","      <td>사과</td>\n","      <td>부사</td>\n","      <td>특</td>\n","      <td>9.0</td>\n","      <td>9.3</td>\n","      <td>380</td>\n","      <td>apple_fuji</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>apple_fuji_L_77-24_4DI45</td>\n","      <td>사과</td>\n","      <td>부사</td>\n","      <td>특</td>\n","      <td>9.0</td>\n","      <td>9.3</td>\n","      <td>380</td>\n","      <td>apple_fuji</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>apple_fuji_L_77-25_5DI90</td>\n","      <td>사과</td>\n","      <td>부사</td>\n","      <td>특</td>\n","      <td>9.0</td>\n","      <td>9.3</td>\n","      <td>380</td>\n","      <td>apple_fuji</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Unnamed: 0  index                 file_name cate1  ... xmin ymin  xmax  ymax\n","0           0      0   apple_fuji_L_77-21_1TOP    사과  ...    0    0  1000  1000\n","1           1      0  apple_fuji_L_77-22_2FR45    사과  ...    0    0  1000  1000\n","2           2      0  apple_fuji_L_77-23_3FR90    사과  ...    0    0  1000  1000\n","3           3      0  apple_fuji_L_77-24_4DI45    사과  ...    0    0  1000  1000\n","4           4      0  apple_fuji_L_77-25_5DI90    사과  ...    0    0  1000  1000\n","\n","[5 rows x 14 columns]"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":420},"id":"SIzwWXs1PK69","executionInfo":{"status":"ok","timestamp":1633768837042,"user_tz":-540,"elapsed":21,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"4043e57a-81c9-45fa-985a-feb1c22bf933"},"source":["df = df[['width', 'height', 'weight']]\n","df = df.drop_duplicates()\n","df"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>weight</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9.0</td>\n","      <td>9.3</td>\n","      <td>380</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>9.5</td>\n","      <td>9.3</td>\n","      <td>400</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>9.1</td>\n","      <td>8.9</td>\n","      <td>400</td>\n","    </tr>\n","    <tr>\n","      <th>100</th>\n","      <td>9.2</td>\n","      <td>8.2</td>\n","      <td>385</td>\n","    </tr>\n","    <tr>\n","      <th>140</th>\n","      <td>9.5</td>\n","      <td>9.1</td>\n","      <td>445</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7569</th>\n","      <td>10.0</td>\n","      <td>8.5</td>\n","      <td>495</td>\n","    </tr>\n","    <tr>\n","      <th>7649</th>\n","      <td>10.0</td>\n","      <td>8.4</td>\n","      <td>470</td>\n","    </tr>\n","    <tr>\n","      <th>7689</th>\n","      <td>10.2</td>\n","      <td>9.0</td>\n","      <td>495</td>\n","    </tr>\n","    <tr>\n","      <th>7729</th>\n","      <td>10.0</td>\n","      <td>9.0</td>\n","      <td>500</td>\n","    </tr>\n","    <tr>\n","      <th>7769</th>\n","      <td>10.2</td>\n","      <td>8.5</td>\n","      <td>500</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>199 rows × 3 columns</p>\n","</div>"],"text/plain":["      width  height  weight\n","0       9.0     9.3     380\n","20      9.5     9.3     400\n","60      9.1     8.9     400\n","100     9.2     8.2     385\n","140     9.5     9.1     445\n","...     ...     ...     ...\n","7569   10.0     8.5     495\n","7649   10.0     8.4     470\n","7689   10.2     9.0     495\n","7729   10.0     9.0     500\n","7769   10.2     8.5     500\n","\n","[199 rows x 3 columns]"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"k3dmC73HPYDk","executionInfo":{"status":"ok","timestamp":1633768837043,"user_tz":-540,"elapsed":20,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"0e6fab38-625e-4063-9a56-a57776131cbb"},"source":["X_test = df[['width', 'height']]\n","y_test = df['weight']\n","\n","X_test.head()"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>width</th>\n","      <th>height</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9.0</td>\n","      <td>9.3</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>9.5</td>\n","      <td>9.3</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>9.1</td>\n","      <td>8.9</td>\n","    </tr>\n","    <tr>\n","      <th>100</th>\n","      <td>9.2</td>\n","      <td>8.2</td>\n","    </tr>\n","    <tr>\n","      <th>140</th>\n","      <td>9.5</td>\n","      <td>9.1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     width  height\n","0      9.0     9.3\n","20     9.5     9.3\n","60     9.1     8.9\n","100    9.2     8.2\n","140    9.5     9.1"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lxpuTUr7QAn7","executionInfo":{"status":"ok","timestamp":1633768837049,"user_tz":-540,"elapsed":25,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"b5d49c25-357e-45f3-f668-6ad4aa50c947"},"source":["y_test"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       380\n","20      400\n","60      400\n","100     385\n","140     445\n","       ... \n","7569    495\n","7649    470\n","7689    495\n","7729    500\n","7769    500\n","Name: weight, Length: 199, dtype: int64"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"-f7wXcBoQTaO"},"source":["##정확도 테스트"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GPbDU_XSPyHM","executionInfo":{"status":"ok","timestamp":1633768839774,"user_tz":-540,"elapsed":363,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"8682920f-10e9-4ae5-edc2-7a804cef3e71"},"source":["print('Elastic : ', elastic.score(X_test, y_test))"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Elastic :  0.9358856735790303\n"]}]},{"cell_type":"code","metadata":{"id":"wreZdkkPQe0_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633768840973,"user_tz":-540,"elapsed":5,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"74a33fc5-706b-45b4-8419-c75a2c25c31d"},"source":["print('Ridge: ', ridge.score(X_test, y_test))"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Ridge:  0.9360078637599655\n"]}]},{"cell_type":"code","metadata":{"id":"NSJPnWyVQguw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633768841268,"user_tz":-540,"elapsed":6,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"359e8c27-0ca5-4dbf-8bc5-1670c329dfd8"},"source":["print('Lasso: ', lasso.score(X_test, y_test))"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Lasso:  0.9374403143569053\n"]}]},{"cell_type":"markdown","metadata":{"id":"ABlVSH5iWL6m"},"source":["> 전부 93%대로 비슷하지만 Lasso가 조금 더 좋은 성능을 가지는 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"6a2Za9LONtub"},"source":["#실제예측 테스트"]},{"cell_type":"code","metadata":{"id":"Ad9oSt39QirI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632468575208,"user_tz":-540,"elapsed":240,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"d2c9f5ec-a986-4a51-c369-1eff996126ba"},"source":["df.iloc[0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["width       9.0\n","height      9.3\n","weight    380.0\n","Name: 0, dtype: float64"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_OtpFP0-OAFk","executionInfo":{"status":"ok","timestamp":1632468576245,"user_tz":-540,"elapsed":5,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"789118f3-7f99-4a03-f0f0-419bf5e9a8be"},"source":["test = list(df.iloc[0][['width', 'height']].values)\n","print(type(test))\n","test"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'list'>\n"]},{"output_type":"execute_result","data":{"text/plain":["[9.0, 9.3]"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"caQkR7RUOQS7","executionInfo":{"status":"ok","timestamp":1632468597757,"user_tz":-540,"elapsed":237,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"6f9f2ce3-ad91-4160-a50e-f4e7d1a0cece"},"source":["test_df = pd.DataFrame(test).T\n","test_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9.0</td>\n","      <td>9.3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     0    1\n","0  9.0  9.3"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VdmdbNW6NT89","executionInfo":{"status":"ok","timestamp":1632468658925,"user_tz":-540,"elapsed":367,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"d9f59678-b320-4756-ecd2-6ba3844657ef"},"source":["ela = elastic.predict(test_df)\n","ela"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([381.91486433])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1OBYr0W_th6u","executionInfo":{"status":"ok","timestamp":1632468663880,"user_tz":-540,"elapsed":236,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"77b2b90a-7725-42ce-9eb6-49d0a16d779b"},"source":["rid = ridge.predict(test_df)\n","rid"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([382.05679512])"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tgqXYqr_tiOl","executionInfo":{"status":"ok","timestamp":1632468669364,"user_tz":-540,"elapsed":240,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"c1c0eefe-f9b4-4fcc-83ac-aa8c47f40103"},"source":["las = lasso.predict(test_df)\n","las"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([374.80995361])"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u00rn4YJN6Wm","executionInfo":{"status":"ok","timestamp":1632468602529,"user_tz":-540,"elapsed":237,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"a671d1d9-68f0-4b4d-a3be-644c75d92fcd"},"source":["df.iloc[0]['weight']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["380.0"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"Fjlxde2WOZOZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632468682954,"user_tz":-540,"elapsed":232,"user":{"displayName":"조현기","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02064242295340458415"}},"outputId":"9dca25d9-47ad-48e5-a0d9-70253da30890"},"source":["(ela + rid + las)/3"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([379.59387102])"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"62-uSMsVt0Zv"},"source":[""],"execution_count":null,"outputs":[]}]}